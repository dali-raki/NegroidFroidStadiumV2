@page "/"
@using BlazorApp1.Domain
@using Microsoft.AspNetCore.Authorization
@using UltimateStadium.Services
@inject NavigationManager Navigation
@inject IUserService UserService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer


<div class="form-container">
    <div class="icon">âš½</div>

    @if (!showCreateAccountForm)
    {
        <h1>Login</h1>
        <div>
            <input type="email" @bind="email" placeholder="Email Address" required/>
            <input type="password" @bind="password" placeholder="Password" required/>
            
            <button type="button" @onclick="log">Login</button>
            <a href="#" class="forgot-password">Forgot Password?</a>
        </div>

        @if (isLoginFailed)
        {
            <div class="error-message">Invalid email or password. Please try again.</div>
        }

        <hr/>

        <button  type="button" @onclick="ToggleCreateAccountForm">Create an Account</button>
    }

    @if (showCreateAccountForm)
    {
        <h1>Create an Account</h1>

        <form @onsubmit="cre">
            <input type="email" @bind="newEmail" placeholder="Email Address" required/>
            <input type="password" @bind="newPassword" placeholder="Password" required/>
            <select @bind="newRole" required>
                <option value="Manager">Manager</option>
                <option value="Client">Client</option>
            </select>
            
          
            <button type="submit">Create Account</button>
        </form>

        <button type="button" @onclick="ShowLoginForm">Back to Login</button>
    }
</div>

@code {

    string email { get; set; }
    string password { get; set; }
    string newEmail { get; set; }
    string newPassword { get; set; }
    UserRole newRole { get; set; } = UserRole.Client;

    bool isLoginFailed = false;
    bool showCreateAccountForm = false; 

   
    public async Task log()
    { 
       
        Console.WriteLine("Login attempt");
        try
        {
            var userRole = await UserService.AuthenticateUser(email, password);

            if (userRole != null)
            {
                switch (userRole)
                {
                    case UserRole.Admin:
                        Navigation.NavigateTo("/DashBoarda");
                        break;
                    case UserRole.Manager:
                        Navigation.NavigateTo("/DashBoardm");
                        break;
                    case UserRole.Client:
                        Navigation.NavigateTo("/client");
                        break;
                    default:
                        Navigation.NavigateTo("/E");
                        break;
                }
                Console.WriteLine("Login successful");
            }
            else
            {
                isLoginFailed = true; 
            }
        }
        catch (Exception ex)
        {
            isLoginFailed = true;
            Console.WriteLine(ex.Message);
        }
    }

  
    private async Task cre()
    {
        try
        {
            
            bool isCreated = await UserService.CreateAccount(newEmail, newPassword, newRole);
           
            showCreateAccountForm = false;
            Console.WriteLine("Account creation attempt");
            if (isCreated)
            {
               
            }
            else
            {
                Console.WriteLine("Account creation failed.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void ToggleCreateAccountForm()
    {
        Console.WriteLine("aa");
        showCreateAccountForm = true; // Show the account creation form and hide the login form
    }

    private void ShowLoginForm()
    {
        Console.WriteLine("aa");
        showCreateAccountForm = false; // Hide the account creation form and show the login form
    }
}



<style>
    /* General Reset */
    body, html {
        margin: 0;
        padding: 0;
        width: 100%;
        height: 100%;
        font-family: 'Arial', sans-serif;
    }

    /* Background */
    body {
        background: url('https://media.istockphoto.com/id/1204755567/vector/football-stadium-vector-1.jpg?s=2048x2048&w=is&k=20&c=Au-drUlKIlokAuhUAgS48cxxgsIezVGkLB7CBlR3sDM=') no-repeat center center/cover;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    /* Form Container */
    .form-container {
        background: rgba(0, 0, 0, 0.7);
        border-radius: 10px;
        padding: 30px;
        width: 350px;
        text-align: center;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    }

    .form-container h1 {
        color: #ffffff;
        font-size: 24px;
        margin-bottom: 20px;
        text-transform: uppercase;
        letter-spacing: 2px;
    }

    /* Input Fields */
    .form-container input {
        width: 100%;
        padding: 10px;
        margin: 10px 0;
        border: none;
        border-radius: 5px;
        font-size: 16px;
    }

    .form-container input[type="email"],
    .form-container input[type="password"] {
        background: #ffffff;
        color: #333;
    }

    .form-container input[type="submit"] {
        background: #28a745;
        color: #ffffff;
        font-weight: bold;
        text-transform: uppercase;
        cursor: pointer;
        transition: background 0.3s ease;
    }

    .form-container input[type="submit"]:hover {
        background: #218838;
    }

    /* Extra Style */
    .form-container .icon {
        font-size: 50px;
        color: #28a745;
        margin-bottom: 20px;
    }

    .form-container .forgot-password {
        display: block;
        margin-top: 10px;
        font-size: 14px;
        color: #ffffff;
        text-decoration: none;
    }

    .form-container .forgot-password:hover {
        text-decoration: underline;
    }

    .sidebar,a{
        display:none;
    }

    .top-row[b-rt9c7rigxs], article[b-rt9c7rigxs]{
        background-color:transparent;
        border:none;
    }
</style>