@page "/manager"
@using BlazorApp1.Domain
@using UltimateStadium.Services
@rendermode InteractiveServer

<h3 class="text-center hero-title">Manage Stadiums</h3>

<div class="container py-4">
    <div class="row g-4">
        @foreach (var stadium in stadiums)
        {
            <div class="col-md-4">
                <div class="card h-100 shadow-lg stadium-card">
                    <img src="/Image/staduim.jpg" class="card-img-top" alt="@stadium.stadiumName">
                    <div class="card-body">
                        <h5 class="card-title">@stadium.stadiumName</h5>
                        <p class="card-text text-muted">@stadium.stadiumPlace</p>
                        <p class="card-text fw-bold">@stadium.stadiumRentalPrice</p>
                    </div>
                    <div class="card-footer text-center">
                        <button @onclick="() => OpenPopup(stadium)" class="btn-reserve">Edit Stadium</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<form>
    <div class="popup"
         style="display:@(showPopup ? "flex" : "none"); gap: 1.5rem;"
         aria-hidden="@(!showPopup)">
        <div class="popup-content">
            <div class="popup-header" style="margin-bottom: 1rem;">
                <h5 class="popup-title" aria-label="Edit Stadium Title">Edit Stadium</h5>
            </div>

            <div class="form-group" style="margin-bottom: 1rem;">
                <label for="stadiumPrice" class="form-label">Price per Reservation</label>
                <input id="stadiumPrice"
                       @bind="target.stadiumRentalPrice"
                       type="number"
                       class="form-control"
                       placeholder="Enter price per reservation"
                       aria-label="Enter price per reservation" />
            </div>

            <div class="popup-actions" style="display: flex; justify-content: space-between; gap: 1rem;">
                <button type="button"
                        @onclick="ClosePopup"
                        class="btn btn-cancel">
                    Cancel
                </button>
                <button type="button"
                        @onclick="save"
                        class="btn btn-save">
                    Save
                </button>
            </div>
        </div>
    </div>
</form>



<style>
    /* Reuse styles from the Home Page */
    .stadium-card {
        background-color: #fff;
        border-radius: 16px;
        padding: 20px;
        border: none;
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
    }

        .stadium-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
        }

        .stadium-card img {
            border-radius: 12px;
            object-fit: cover;
            height: 180px;
        }

        .stadium-card h5 {
            color: #007b00;
            font-size: 1.3rem;
            font-weight: bold;
            margin-top: 15px;
        }

        .stadium-card p {
            font-size: 1rem;
            color: #6c757d;
            margin-bottom: 10px;
        }

        .stadium-card .btn-reserve {
            background-color: #28a745;
            color: #fff;
            padding: 12px 25px;
            border-radius: 8px;
            font-weight: bold;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            .stadium-card .btn-reserve:hover {
                background-color: #218838;
            }

    .card-footer {
        padding: 10px;
        border-top: 2px solid #007b00;
        text-align: center;
        background-color: #f8f9fa;
        border-radius: 0 0 12px 12px;
    }

    /* Popup Styles */
    .popup {
        display: flex;
        justify-content: center;
        align-items: center;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.6);
        z-index: 1000;
    }

    .popup-content {
        background-color: #fff;
        padding: 30px;
        border-radius: 12px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        max-width: 450px;
        width: 100%;
    }

    /* Popup Header */
    .popup-header {
        background-color: #007b00; /* Green background for header */
        padding: 15px;
        border-radius: 10px;
        color: white;
        text-align: center;
    }

    .popup-title {
        font-size: 1.6rem;
    }

    .btn-cancel {
        background-color: #ffc107; /* Yellow background for Cancel */
        color: white;
    }

    .btn-save {
        background-color: #28a745; /* Green background for Save */
        color: white;
    }

    .hero-title {
        font-size: 2rem; /* Reduced font size */
        font-weight: bold;
        color: #fff;
        background: #007b00; /* Green grass-like background */
        padding: 50px 0; /* Reduced padding */
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.6); /* Football field vibe */
    }
</style>

@code {
    [Inject] public IStadiumService StadiumService { get; set; }
    private bool showPopup = false;
    List<Stadium> stadiums = new List<Stadium>();
    private Stadium target = new Stadium("", "", "", 0, false, "");

    private async Task save()
    {
        await StadiumService.updatestadium(target.stadiumId, target);
        ClosePopup();
    }

    protected override async Task OnInitializedAsync()
    {
        stadiums = await StadiumService.getAllStadiums();
    }

    private void OpenPopup(Stadium stadium)
    {
        target = stadium;
        showPopup = true;
    }

    private void ClosePopup()
    {
        showPopup = false;
    }
}
