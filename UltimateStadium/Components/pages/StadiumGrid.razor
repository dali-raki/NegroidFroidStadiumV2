@page "/"
@using BlazorApp1.Domain
@using UltimateStadium.Storage
@inject IStadiumStorage StadiumStorage
@using  UltimateStadium.Services
@using UltimateStadium.Components.Layout
@rendermode InteractiveServer

<h3>Stadium Management</h3>

<div class="container mt-4">
    <!-- Add Stadium Button -->
    <button class="btn btn-primary mb-3" @onclick="OpenAddStadiumModal">Add Stadium</button>

    <!-- Grid Display -->
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Location</th>
                <th>Price</th>
                <th>Reserved</th>
                <th>Option</th>
            </tr>
        </thead>
        <tbody>
            @if (Stadiums == null || Stadiums.Count == 0)
            {
                <tr>
                    <td colspan="4" class="text-center">No stadiums available.</td>
                </tr>
            }
            else
            {
                @foreach (var stadium in Stadiums)
                {
                    <tr>
                        <td>@stadium.stadiumName</td>
                        <td>@stadium.stadiumPlace</td>
                        <td>@stadium.stadiumRentalPrice</td>
                        <td>@(stadium.isRented ? "Yes" : "No")</td>
                        <td>
                            <button @onclick="() => DeleteStadium(Guid.Parse(stadium.stadiumId.ToString()))"><i class="fa-solid fa-trash"></i></button>
                            <button><i class="fa-solid fa-pen-to-square"></i></button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>
<style>
    h3 {
        text-align: center;
        font-weight: bold;
        color: #343a40; /* Dark gray for readability */
        margin-bottom: 20px;
    }

    .container {
        max-width: 1200px; /* Limits the width for better readability */
        margin: 0 auto; /* Centers the container */
        padding: 20px;
        background-color: #f8f9fa; /* Light background for contrast */
        border-radius: 10px; /* Smooth corners */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Subtle shadow */
    }

    button.btn-primary {
        background-color: #007bff; /* Primary blue */
        color: #fff;
        font-size: 1rem;
        padding: 10px 20px;
        border-radius: 5px; /* Rounded button */
        border: none;
        transition: background-color 0.3s, transform 0.2s;
    }

        button.btn-primary:hover {
            background-color: #0056b3; /* Darker blue on hover */
            transform: scale(1.05); /* Slight zoom effect */
        }

    .table {
        margin-top: 20px;
        background-color: #ffffff; /* White background for the table */
        border-radius: 10px; /* Smooth corners */
        overflow: hidden; /* Prevents content overflow on the corners */
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Subtle shadow */
    }

        .table th {
            background-color: #007bff; /* Primary blue for header */
            color: #fff; /* White text for contrast */
            text-align: center;
            font-weight: bold;
        }

        .table td {
            text-align: center;
            vertical-align: middle; /* Aligns content vertically */
            color: #343a40; /* Dark gray text */
        }

        .table tbody tr:nth-child(odd) {
            background-color: #f2f2f2; /* Alternating row color */
        }

        .table tbody tr:hover {
            background-color: #e9ecef; /* Light gray on hover */
            transition: background-color 0.3s;
        }

    button i {
        font-size: 1rem;
        color: #ffffff; /* White icons */
    }

        button i:hover {
            color: #f8f9fa; /* Slight color change for icons on hover */
        }

    button {
        background-color: #dc3545; /* Red for delete button */
        border: none;
        padding: 5px 10px;
        border-radius: 5px; /* Rounded button */
        cursor: pointer;
        transition: transform 0.2s, background-color 0.3s;
    }

        button:hover {
            transform: scale(1.1); /* Slight zoom on hover */
            background-color: #c82333; /* Darker red */
        }

        button:last-child {
            background-color: #ffc107; /* Yellow for edit button */
        }

            button:last-child:hover {
                background-color: #e0a800; /* Darker yellow on hover */
            }

    .text-center {
        font-size: 1rem;
        color: #6c757d; /* Neutral gray text for empty rows */
    }

</style>

<!-- Add Stadium Modal -->
<AddStadiumModal Show="@ShowModal" OnClose="CloseAddStadiumModal" OnSave="AddNewStadium" />

@code {

    private List<Stadium> Stadiums = new();
    private bool ShowModal = false;


    [Inject] public IStadiumService StadiumService { get; set; }
    protected override async Task OnInitializedAsync()
    {
        // Load stadiums from the database or storage
        Stadiums = await StadiumStorage.selectAllStadiums();

    }

    public async Task DeleteStadium(Guid id)
    {
        await StadiumService.RemoveStadium(id);

        await OnInitializedAsync();
    }

    private void OpenAddStadiumModal()
    {
        ShowModal = true; // Show the modal
        Console.WriteLine("press");
    }

    private async void CloseAddStadiumModal(bool show)
    {
        ShowModal = show; // Hide the modal
        Stadiums = await StadiumStorage.selectAllStadiums();
    }

    private async Task AddNewStadium(Stadium stadium)
    {
         Stadiums.Add(stadium); // Add to local list

        

        StateHasChanged(); // Refresh the UI
    }


}
